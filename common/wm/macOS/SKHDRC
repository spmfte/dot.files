# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
 shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
 shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
 cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
 # shift + cmd - z : yabai -m window --space next; yabai -m space --focus next

# 2023-11-10: Commented this line to make screenshots with arc browser properly work 
 # shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
 ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
 alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
 alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip: chunkc tiling::desktop --deserialize ~/.chunkwm_layouts/dev_1
#
# rotate tree
alt + cmd - r : yabai -m space --rotate 90
shift + alt + cmd - r : yabai -m space --rotate 180

# Focus windows in different directions (like Vim)
ctrl + alt + cmd - h : yabai -m window --focus west
ctrl + alt + cmd - j : yabai -m window --focus south
ctrl + alt + cmd - k : yabai -m window --focus north
ctrl + alt + cmd - l : yabai -m window --focus east

# Move focused window to different spaces
shift + ctrl + cmd - left : yabai -m window --space prev
shift + ctrl + cmd - right : yabai -m window --space next

# Swap focused window with adjacent windows
alt + cmd - left : yabai -m window --swap west
alt + cmd - right : yabai -m window --swap east
alt + cmd - up : yabai -m window --swap north
alt + cmd - down : yabai -m window --swap south

# # Change space
# cmd - left : yabai -m space --focus prev
# cmd - right : yabai -m space --focus next

# Toggle window fullscreen mode
ctrl + cmd - f : yabai -m window --toggle fullscreen

# Toggle window native macOS fullscreen mode
ctrl + cmd - m : yabai -m window --toggle native-fullscreen

# Resize windows
ctrl + alt - right : yabai -m window --resize right:20:0
ctrl + alt - up : yabai -m window --resize bottom:0:-20
ctrl + alt - left : yabai -m window --resize left:-20:0
ctrl + alt - down : yabai -m window --resize top:0:20

ctrl + alt + shift - right : yabai -m window --resize left:20:0
ctrl + alt + shift - up : yabai -m window --resize bottom:0:20
ctrl + alt + shift - left : yabai -m window --resize right:-20:0
ctrl + alt + shift - down : yabai -m window --resize top:0:-20

# Custom hotkey for centering and resizing the current window 
alt - c : yabai -m window --resize abs:500:800; yabai -m window --move abs:center

# Custom hotkey for toggling between floating and non-floating for the current window
alt - t : yabai -m window --toggle float
# Custom hotkey for toggling between bsp and float space layout
# alt - l : yabai -m space --layout--toggle 

# toggle whether the focused window should have a border
ctrl + alt - b : yabai -m window --toggle border

# toggle whether the focused window should be shown on all spaces
ctrl + alt - s : yabai -m window --toggle sticky

# move focused window to (100, 200)
ctrl + alt - c : yabai -m window --move abs:100:200

# change window size to (500, 800)
ctrl + alt - d : yabai -m window --resize abs:500:800

# move focused window 100 to the right, 200 up
ctrl + alt - e : yabai -m window --move rel:100:-200

# grow window by 100 to the right, shrink by 200 at the bottom
ctrl + alt - f : yabai -m window --resize bottom_right:100:-20
ctrl + alt + cmd - return : yabai -m space --destroy
ctrl + alt + cmd - 2 : yabai -m space --display 2

# Added from skhdrcexample.txt
# cmd - return : open -na /Applications/iTerm.app
# Opens iTerm2
# cmd + shift - return : open -na /Applications/iTerm.app --args -e htop
# Opens htop in a new iTerm2 window
# cmd - m : open -na /Applications/mpv.app $(pbpaste)
# Opens the URL or file from the clipboard in mpv



# i3 type beat so i dont get arthritis from clicking the small ass arrow keys 
# Added 2023-10-05
# 
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ---------------------[UNHIGHLIGHT THIS ONCE ISSUES FIXED (2023-11-08)]-----------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cmd - 1 : yabai -m space --focus 1  
cmd - 2 : yabai -m space --focus 2 
cmd - 3 : yabai -m space --focus 3
cmd - 4 : yabai -m space --focus 4
cmd - 5 : yabai -m space --focus 5
cmd - 6 : yabai -m space --focus 6
cmd - 7 : yabai -m space --focus 7
cmd - 8 : yabai -m space --focus 8
cmd - 9 : yabai -m space --focus 9
cmd - 0 : yabai -m space --focus 10
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ---------------------[UNHIGHLIGHT THIS ONCE ISSUES FIXED (2023-11-08)]-----------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# i3 type beat cont.
# Added 2023-10-05
cmd + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1
cmd + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2
cmd + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3
cmd + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4
cmd + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5
cmd + alt - 6 : yabai -m window --space 6; yabai -m space --focus 6
cmd + alt - 7 : yabai -m window --space 7; yabai -m space --focus 7
cmd + alt - 8 : yabai -m window --space 8; yabai -m space --focus 8
cmd + alt - 9 : yabai -m window --space 9; yabai -m space --focus 9
cmd + alt - 0 : yabai -m window --space 10; yabai -m space --focus 10

# ChatGPT hotkey
f1: osascript /Users/aidan/scripts/chatgpt_script.scpt
